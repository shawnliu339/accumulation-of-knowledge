# 该文档用于学习Swagger2.0。基本尝试了Open API 2.0标准中的多数写法。
# 下一步将尝试自定义Swagger UI，例如，展示默认API页面和添加模版。
swagger: '2.0'
info:
  description: 票务转交让系统API说明
  version: 1.0.0
  title: 票务转让系统
  # put the contact info for your development or API team
  contact:
    email: sranliu339@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

host: 0.0.0.0:3000
basePath: /api/v1

schemes:
 - https
 - http

# tags are used for organizing operations
tags:
- name: users
  description: 用户相关API
- name: tickets
  description: 票务相关API

# Global MIME type
consumes:
  - application/json
produces:
  - application/json

paths:
  /users:
    get:
      tags:
      - users
      summary: 获取全部用户信息
      operationId: getUsers
      description: |
        获取全部用户信息
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

    post:
      tags:
      - users
      summary: 新增用户
      operationId: addUser
      description: 新增用户
      parameters:
      - in: body
        name: body
        description: 用户信息
        required: true
        schema:
          type: object
          properties:
            uid:
              type: string
              example: uid_001
            name:
              type: string
              example: Arthur Dent
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /users/{user_id}:
    get:
      tags:
      - users
      summary: 获取指定用户
      operationId: getUserById
      description: |
        获取指定用户
      parameters:
      - in: path
        name: user_id
        description: 用户ID
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'

  /users/{user_id}/tickets:
    get:
      tags:
      - users
      summary: 获取指定用户所持有的票务信息
      operationId: getTicketsByUserId
      description: |
        获取指定用户所持有的票务信息
      parameters:
      - in: path
        name: user_id
        description: ユーザのID
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'

  /users/{user_id}/transfer:
    post:
      tags:
      - users
      summary: 票务转让
      operationId: transferTicket
      description: |
        票务转让
      parameters:
      - in: path
        name: user_id
        description: ユーザのID
        required: true
        type: integer
      - in: body
        name: body
        description: 转让票信息
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
              example: 1
            from_user_id:
              type: integer
              example: 1
            to_user_id:
              type: integer
              example: 2
            ticket_id:
              type: integer
              example: 1
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Transfer'

  /tickets:
    get:
      tags:
      - tickets
      summary: 获取全部票务信息
      operationId: getTickets
      description: |
        获取全部票务信息
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'

    post:
      tags:
      - tickets
      summary: 新增票务信息
      operationId: addTicket
      description: |
        新增票务信息
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            user_id:
              type: integer
              example: 1
            title:
              type: string
              example: ticket
            description:
              type: string
              example: This is a ticket
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Ticket'

  /tickets/{ticket_id}:
    get:
      tags:
      - tickets
      summary: 获取指定票务信息
      operationId: getTicketById
      description: |
        获取指定票务信息
      parameters:
      - in: path
        name: ticket_id
        description: チケットのID
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Ticket'

    delete:
      tags:
      - tickets
      summary: 删除票务
      operationId: deleteTicket
      parameters:
      - in: path
        name: ticket_id
        description: 票务ID
        required: true
        type: integer
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Ticket not found

  /tickets/{ticket_id}/history:
    get:
      tags:
      - tickets
      summary: 获取指定票的转让历史信息
      operationId: getHistoryByTicketId
      description: |
        获取指定票的转让历史信息
      parameters:
      - in: path
        name: ticket_id
        description: 票务ID
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              ticket:
                $ref: '#/definitions/Ticket'
              transfers:
                type: array
                items:
                  $ref: '#/definitions/Transfer'

definitions:
  User:
    type: object
    required:
    - id
    - uid
    - name
    - created_at
    - updated_at
    properties:
      id:
        type: integer
        example: 1
      uid:
        type: string
        example: uid_001
      name:
        type: string
        example: name_001
      created_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC
      updated_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC

  Ticket:
    type: object
    required:
    - id
    - identifier
    - title
    - description
    - created_at
    - updated_at
    - status
    properties:
      id:
        type: integer
        example: 1
      identifier:
        type: string
        example: ticket001
      title:
        type: string
        example: title001
      description:
        type: string
        example: This is a ticket data.
      created_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC
      updated_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC
      status:
        type: integer
        example: 1

  Transfer:
    type: object
    required:
    - id
    - from_user_id
    - to_user_id
    - ticket_id
    - created_at
    - updated_at
    properties:
      id:
        type: integer
        example: 1
      from_user_id:
        type: integer
        example: ticket001
      to_user_id:
        type: integer
        example: 2
      ticket_id:
        type: integer
        example: 1
      created_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC
      updated_at:
        type: string
        format: date
        example: 2018-04-15 03:21:52 UTC
